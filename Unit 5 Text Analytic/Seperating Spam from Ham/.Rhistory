datasets::mtcars
house
mog
mpg
base <- ggplot(mpg, aes(displ,hwy)) + geom_point()
base
base + geom_smooth()
base + geom_smooth(method = 'lm')
base + geom_smooth()
base + subset(mpg, fl=='p')
base %+% subset(mpg, fl=='p')
base
base + list(subset(mpg, fl=='p'), geom_smooth())
qplot(mpg, wt, data = mtcars)
qplot(mpg, wt, data = mtcars, colour = am)
qplot(mpg, wt, data = mtcars, size = am)
qplot(mpg, wt, data = mtcars, fill = am)
qplot(mpg, wt, data = mtcars, fill = cyl)
qplot(mpg, wt, data = mtcars, size = cyl)
qplot(mpg, wt, data = mtcars, colour = cyl)
ggplot(mtcars, aes(cyl)) + geom_bar()
ggplot(mtcars, aes(factor(cyl)) + geom_bar()
a
ggplot(mtcars, aes(factor(cyl)) + geom_bar()
a
ggplot(mtcars, aes(factor(cyl))) + geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(am))) + geom_bar()
qplot(mpg, wt, data = mtcars, colour = cyl)
qplot(mpg, wt, data = mtcars, shape = cyl)
qplot(mpg, wt, data = mtcars, shape = factor(cyl))
qplot(mpg, wt, data = mtcars, colour = factor(cyl))
df.team_data <- expand.grid(teams = c("Team A", "Team B", "Team C", "Team D")
,metrics = c("Metric 1", "Metric 2", "Metric 3", "Metric 4", "Metric 5")
)
View(df.team_data)
df.team_data$performance <- rnorm(nrow(df.team_data))
ggplot(data = df.team_data, aes(x = metrics, y = teams)) +
geom_tile(aes(fill = performance))
df.isi <- expand.grid(carrier_number = c('0':'47'))
View(df.isi)
df.isi <- expand.grid(carrier_number = c('0':'47'), carrier_number = c('0':'47'))
df.isi <- expand.grid(carrier number = c('0':'47'), carrier number = c('0':'47'))
df.isi <- expand.grid(carrier_number1 = c('0':'47'), carrier_number2 = c('0':'47'))
48*48
ISI <- read.table("~/OneDrive/Documents/Matlab files/Thesis/InterferencePatternGFDM/ISI.csv", quote="\"", comment.char="")
View(ISI)
ISI$V1
View(df.isi)
df.isi$ISI = ISI$V1
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_tile(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2), xlab('carrier number'), ylab('carrier number')) + geom_raster(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2), xlab='carrier number', ylab='carrier number') + geom_raster(aes(fill = ISI))
luv_colours
xlab('quang')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2), xlab='carrier number', ylab='carrier number') + geom_raster(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2), xlab='carrier number', ylab='carrier number') + geom_rect(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2), xlab='carrier number', ylab='carrier number') + geom_raster(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2()
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient()
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2()
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2(low = 'red', high = 'blue')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2(low = 'blue', high = 'red')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2, colours = terrain.colors(10))) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2(low = 'blue', high = 'red')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2(low = 'blue', high = 'red',colours = terrain.colors(10))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = terrain.colors(10))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = terrain.colors(1))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = terrain.colors(2))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = terrain.colors(20))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = terrain.colors(50))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller()
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'spectral')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'Spectral')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'BrBg')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'BrBG')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'PiYG')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'PrGn')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'PRGn')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'PuOr')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RdBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlGnBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RlBnYu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOnRu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOnRd')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOrRd')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOrRd', direction = -1)
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOrRd', direction = 1)
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RdYlBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RdGlBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RdYlBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = rainbow(4))
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
jet.colors(1)
jet.colors(7)
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(7))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(1))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(2))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(3))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(5))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(7))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(8))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(10))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(15))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(30))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(12))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(7))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn()
sd(c(5,8,12))
which.min(c(4,1,6))
which.max(c(4,1,6))
Sys.setlocale("LC_ALL","C")
rbind?
ds
help("rbind")
ISI
df.isi
df
a <- c(1,2,3)
rbind(c,12)
cbind(1,1:7)
rbind(1,1:7)
rbind(1,1:22)
rbind(2*2,1:22)
a <- c(1,2,3)
a
rbind(a,c(4,5,6))
quang <- rbind(a,c(4,5,6))
View(quang)
quang$V1
colnames(quang)
colnames(quang) = c('q','d','e')
quang
quang$q
quang.q
quang['q']
quang
colnames(quang)
quang["q"]
quang[1]
quang[,"q"]
quang[,"d"]
quang[,"e"]
quang["e"]
quang[1,"e"]
quang[,"e"]
quang[,c("e")]
quang[,c("e",'q')]
ta <- quang[,c('e','q')]
ta <- quang[,'e']
ta
ta[1]
ta[2]
names(ta)
ta <- quang[,c('e')]
ta
ta <- quang[,c('e','q')]
quang[0]
quang[1]
quang[2]
quang
quang[3]
View(quang)
quang$q
quang['d']
quang['e']
quang[c('e','d')]
mpg
ggplot(data = mpg, aes(x = displ, y = hwy, colour = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = cyl)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, shape = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = factor(class))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy), color = 'red') + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy), color = "blue") + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = "blue")) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = "red")) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "blue")
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "red")
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "green")
mpg
ggplot(mpg, aes(x=audi)) + geom_bar()
ggplot(mpg, aes(x=manufacturer)) + geom_bar()
ggplot(mpg, aes(x=manufacturer, fill = model)) + geom_bar()
install.packages("reshape2")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("devtools")
g <- ggplot(mpg, aes(x = manufacturer))
g <- ggplot2(mpg, aes(x = manufacturer))
library(ggplot2)
g <- ggplot(mpg, aes(x = manufacturer))
g
g + geom_bar(aes(fill=class)) + coord_map()
mpg
g + geom_bar(aes(fill=model)) + coord_map()
g + geom_bar(aes(fill=model))
g + geom_bar(aes(fill=model)) + coord_flip()
g + geom_bar(aes(fill=model)) + coord_flip() + scale_color_brewer()
g + geom_bar(aes(fill=model)) + coord_flip() + scale_color_gradient2()
g + geom_bar(aes(fill=model), position = 'dodge') + coord_flip() + scale_color_gradient2()
library(readxl)
library(dplyr)
install.packages("dplyr")
install.packages("readxl")
library(readxl)
library(dplyr)
treemap
treemap()
WHO <- read.csv("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/WHO.csv", header=FALSE)
View(WHO)
WHO <- read.csv("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/WHO.csv")
View(WHO)
summarise(WHO)
info(WHO)
summary(WHO)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point()
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(fill = Resion)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(fill = Region)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(fill = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(color = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(color = Country))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Country))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = GNI))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate), color = "blue") + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale), color = 'green')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale), color = 'blue')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Population), color = 'blue')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$LifeExpectancy), color = 'blue')
ggplot(WHO, aes(Country, Population)) + geom_text()
ggplot(WHO, aes(label = Population)) + geom_text()
ggplot(WHO, aes(Country, Population)) + geom_bar()
ggplot(WHO, aes(Region, Population)) + geom_bar()
ggplot(WHO, aes(x = Region)) + geom_bar(fill = Population)
ggplot(WHO, aes(x = Region)) + geom_bar()
ggplot(WHO, aes(x = Region)) + geom_bar(aes(y=Population))
ggplot(WHO, aes(x = Region)) + stat_count(Population)
ggplot(WHO, aes(Region, Population)) + geom_col()
ggplot(WHO, aes(Region, Country)) + geom_col()
ggplot(WHO, aes(Region, Country)) + geom_col()
.libPaths()
version
packageStatus()
update.packages(checkBuilt=TRUE)
y
y
packageStatus()
install.packages('tidyverse')
library('tidyverse')
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = mpg$displ, y = mpg$hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = mpg$displ, y = mpg$hwy, color = mpg$class))
setwd("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/Unit 5 Text Analytic/Predictive Coding")
emails <- read.csv('energy_bids.csv', stringsAsFactors = FALSE)
emails$email[1]
strwrap(emails$email[1])
emails$responsive[1]
emails$email[2]
strwrap(emails$email[2])
emails$responsive[2]
table(emails$responsive)
139/(139+716)
library(tm)
corpus <- VCorpus(VectorSource(emails$email))
corpus[[1]]
corpus[[1]]$content
strwrap(corpus[[1]]$content)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(removePunctuation))
corus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
corpus[[1]]$content
dtm <- DocumentTermMatrix(corpus)
ftm
dtm
removeSparseTerms(dtm, sparse = 0.97)
dtm
dtm <- removeSparseTerms(dtm, sparse = 0.97)
dtm
labeledTerms <- as.data.frame(as.matrix(dtm))
labeledTerms$responsive <- emails$responsive
str(labeledTerms)
str(labeledTerms$responsive)
library(caTools)
set.seed(144)
spl <- sample.split(labeledTerms$responsive, SplitRatio = 0.7)
train <- subset(labeledTerms, spl==TRUE)
test <- subset(labeledTerms, spl==FALSE)
library(rpart)
library(rpart.plot)
CARTModel <- rpart(responsive ~ ., data = train, method = "class")
predictCART <- predict(CARTModel, newdata = test, type = "class")
prp(CARTModel)
table(test$responsive, predictCART)
(195+21)/(195+21+21+20)
table(test$responsive)
(215)/(215+42)
library(ROCR)
predictCART <- predict(CARTModel, newdata = test)
predROCR <- prediction(predictCART[2], test$responsive)
predROCR <- prediction(predictCART[,2], test$responsive)
as.numeric(performance(predROCR, "auc")@y.values)
plot(performance(predROCR, "tpr","fpr"))
plot(performance(predROCR, "tpr","fpr"), colororized=TRUE)
plot(performance(predROCR, "tpr","fpr"), colororize=TRUE)
plot(performance(predROCR, "tpr","fpr"), colorize=TRUE)
setwd("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/Unit 5 Text Analytic/Seperating Spam from Ham")
knitr::opts_chunk$set(echo = TRUE, comment = NA, results = "hold", message = FALSE, warning = FALSE)
emails <- read.csv("emails.csv", stringsAsFactors = FALSE)
str(emails)
table(emails$spam)
emails$text[1]
emails$text[2]
max(nchar(emails$text))
which.min(nchar(emails$text))
corpus <- VCorpus(VectorSource(emails$text))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(removePunctuation))
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
dtm <- DocumentTermMatrix(corpus)
dtm
spdtm <- removeSparseTerms(dtm, sparse = 0.95)
spdtm
emailsSparse <- as.data.frame(spdtm)
emailsSparse <- as.data.frame(as.matrix(spdtm))
colnames(emailsSparse) <- make.names(colnames(emailsSparse))
sort(colSums(emailsSparse))
emailsSparse <- as.data.frame(as.matrix(spdtm))
colnames(emailsSparse) <- make.names(colnames(emailsSparse))
tail(sort(colSums(emailsSparse)))
emailsSparse$spam <- emails$spam
tapply(emailsSparse, colSums, emailsSparse$spam == 1)
emailsSparse$spam <- emails$spam
tapply(emailsSparse, emailsSparse$spam == 1, colSums)
emailsSparse$spam <- emails$spam
tapply(emailsSparse, emailsSparse$spam == 1, colSums)
emailsSparse$spam <- emails$spam
tapply(emailsSparse, colSums)
?tapply
emailsSparse$spam <- emails$spam
tapply(emailsSparse, emailsSparse$spam == 1, colSums)
View(emailsSparse)
emailsSparse$spam <- emails$spam
str(emailsSparse$spam)
emailsSparse$spam <- emails$spam
table(emailsSparse$spam)
emailsSparse$spam <- emails$spam
emailsSparse$spam==1
emailsSparse$spam <- emails$spam
a <- emailsSparse$spam==1
emailsSparse$spam <- emails$spam
colSums(subset(emailsSparse, emailsSparse$spam==1))
emailsSparse$spam <- emails$spam
colSums(subset(emailsSparse, emailsSparse$spam==0))
emailsSparse$spam <- emails$spam
sort(colSums(subset(emailsSparse, emailsSparse$spam==0)))
emailsSparse$spam <- emails$spam
wordsHam <- colSums(subset(emailsSparse, emailsSparse$spam==0))
sum(wordsHam >= 500)
emailsSparse$spam <- emails$spam
wordsHam <- colSums(subset(emailsSparse, emailsSparse$spam==0))
sum(wordsHam >= 5000)
sum(wordsHam >= 1000)
wordsSpam <- colSums(subset(emailsSparse, emailsSparse$spam==1))
sum(wordsSpam >= 1000)
wordsSpam <- colSums(subset(emailsSparse, emailsSparse$spam==1))
sum(wordsSpam >= 1000)
wordsSpam <- colSums(subset(emailsSparse, emailsSparse$spam==1))
wordsSpam
wordsSpam <- colSums(subset(emailsSparse, emailsSparse$spam==1))
sort(wordsSpam)
wordsSpam <- colSums(subset(emailsSparse, emailsSparse$spam==1))
sort(wordsHam)
wordsSpam <- colSums(subset(emailsSparse, emailsSparse$spam==1))
sort(wordsSpam)
emailsSparse$spam <- emails$spam
wordsHam <- colSums(subset(emailsSparse, emailsSparse$spam==0))
sort(wordsHam)
emailsSparse$spam <- as.factor(emailsSparse$spam)
set.seed(123)
library(caTools)
spl <- sample.split(emailsSparse$spam, SplitRatio = 0.7)
train <- subset(emailsSparse, spl == TRUE)
test <- subset(emailsSparse, spl == FALSE)
spamLog <- glm(spam ~ ., data = train, family = "binomial", method = "response")
emailsSparse$spam <- as.factor(emailsSparse$spam)
set.seed(123)
library(caTools)
spl <- sample.split(emailsSparse$spam, SplitRatio = 0.7)
train <- subset(emailsSparse, spl == TRUE)
test <- subset(emailsSparse, spl == FALSE)
spamLog <- glm(spam ~ ., data = train, family = "binomial")
library(rpart)
library(rpart.plot)
spamCART <- rpart(spam ~ ., data = train, method = "class")
library(randomForest)
set.seed(123)
spamRF <- randomForest(spam ~ ., data = train)
predTrainLog <- predict(spamLog)
sum(predTrainLog < 0.00001)
sum(predTrainLog > 0.99999)
sum(predTrainLog < 0.00001)
sum(predTrainLog > 0.99999)
sum(predTrainLog < 0.00001)
sum(predTrainLog > 0.99999)
sum(predTrainLog < 0.99999 & predTrainLog > 0.00001)
sum((predTrainLog < 0.99999 & predTrainLog > 0.00001))
TRUE & FALSE
TRUE & TRUE
sum(predTrainLog < 0.00001)
sum(predTrainLog > 0.99999)
sum(predTrainLog < 0.00001)
sum(predTrainLog > 0.99999)
5728 - 3056 - 954
4010 - 3056 - 954
sum(predTrainLog < 0.00001)
sum(predTrainLog > 0.99999)
sum(predTrainLog < 0.99999 & predTrainLog > 0.00001)
summary(spamLog)
prp(spamCART)
table(emailsSparse$spam, predTrainLog[,2] >= 0.5)
table(emailsSparse$spam, predTrainLog >= 0.5)
table(train$spam, predTrainLog[,2] >= 0.5)
predTrainLog
table(train$spam, predTrainLog >= 0.5)
table(train$spam, predTrainLog >= 0.5)
(3052+954)/(3052+954+4)
library(ROCR)
library(ROCR)
as.numeric(performance(prediction(predTrainLog, train$spam), "auc")@y.values)
predTrainCART <- predict(spamCART)
table(train$spam, predTrainCART[,2]>=0.5)
predTrainCART <- predict(spamCART)
table(train$spam, predTrainCART[,2]>=0.5)
(2885+894)/(2885+894+167+64)
as.numeric(performance(prediction(predTrainCART[,2]), "auc")@y.values)
as.numeric(performance(prediction(predTrainCART[,2], train$spam), "auc")@y.values)
predTrainRF <- predict(spamRF)
table(train$spam, predTrainRF[,2]>=0.5)
predTrainRF <- predict(spamRF)
table(train$spam, predTrainRF>=0.5)
predTrainRF
predTrainRF <- predict(spamRF, type = "response")
predTrainRF
predTrainRF <- predict(spamRF, type = "prob")
table(train$spam, predTrainRF[,2]>=0.5)
predTrainRF <- predict(spamRF, type = "prob")
table(train$spam, predTrainRF[,2]>=0.5)
(3013+914)/(3013+914+39+44)
as.numeric(performance(prediction(predTrainRF[,2], train$spam), "auc")@y.values)
predLog <- predict(spamLog, newdata = test, type = "response")
table(test$spam, predLog >= 0.5)
predLog <- predict(spamLog, newdata = test, type = "response")
table(test$spam, predLog >= 0.5)
(1257+376)/(1257+376+51+34)
as.numeric(performance(prediction(predLog, test$spam), "auc")@y.values)
predCART <- predict(spamCART, newdata = test)
table(test$spam, predCART[,2]>=0.5)
predCART <- predict(spamCART, newdata = test)
table(test$spam, predCART[,2]>=0.5)
(1228+386)/(1228+386+80+24)
as.numeric(performance(prediction(predCART, test$spam), "auc")@y.values)
as.numeric(performance(prediction(predCART[,2], test$spam), "auc")@y.values)
predRF <- predict(spamRF, newdata = test, type = "prob")
table(test$spam, predRF[,2]>=0.5)
predRF <- predict(spamRF, newdata = test, type = "prob")
table(test$spam, predRF[,2]>=0.5)
(1290+386)/(1290+386+18+24)
as.numeric(performance(prediction(predRF[,2], test$spam), "auc")@y.values)
wordCount <- rowSums(as.matrix(dtm))
hist(wordCount)
hist(log(wordCount))
library(ggplot2)
ggplot()+geom_histogram(wordCount)
library(ggplot2)
ggplot()+geom_histogram(aes(wordCount))
ggplot() + geom_histogram(aes(log(wordCount)))
emailsSparse$logWordCount <- log(wordCount)
ggplot(emailsSparse) + geom_boxplot(aes(spam, logWordCount))
train2 <- subset(emailsSparse, spl == TRUE)
test2 <- subset(emailsSparse, spl == FALSE)
spam2CART <- rpart(spam ~ ., data = train2)
set.seed(123)
spam2RF <- randomForest(spam ~., data = train2)
prp(spam2CART)
predCART2 <- predict(spam2CART, newdata = test2)
table(test2$spam, predCART2[,2]>=0.5)
predCART2 <- predict(spam2CART, newdata = test2)
table(test2$spam, predCART2[,2]>=0.5)
(1214+384)/(1214+384+94+26)
as.numeric(performance(prediction(predCART[,2], test$spam), "auc")@y.values)
predRF2 <- predict(spam2RF, newdata = test2)
table(test2$spam, predRF2[,2]>=0.5)
predRF2 <- predict(spam2RF, newdata = test2, type = "prob")
table(test2$spam, predRF2[,2]>=0.5)
predRF2 <- predict(spam2RF, newdata = test2, type = "prob")
table(test2$spam, predRF2[,2]>=0.5)
(1296+383)/(1296+383+27+12)
as.numeric(performance(prediction(predCART2[,2], test$spam), "auc")@y.values)
as.numeric(performance(prediction(predRF2[,2], test$spam), "auc")@y.values)
