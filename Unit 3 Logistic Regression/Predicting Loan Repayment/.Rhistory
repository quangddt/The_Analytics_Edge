ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOnRd')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOrRd')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOrRd', direction = -1)
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOrRd', direction = 1)
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RdYlBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RdGlBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RdYlBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = rainbow(4))
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
jet.colors(1)
jet.colors(7)
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(7))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(1))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(2))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(3))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(5))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(7))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(8))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(10))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(15))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(30))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(12))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(7))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn()
sd(c(5,8,12))
which.min(c(4,1,6))
which.max(c(4,1,6))
Sys.setlocale("LC_ALL","C")
rbind?
ds
help("rbind")
ISI
df.isi
df
a <- c(1,2,3)
rbind(c,12)
cbind(1,1:7)
rbind(1,1:7)
rbind(1,1:22)
rbind(2*2,1:22)
a <- c(1,2,3)
a
rbind(a,c(4,5,6))
quang <- rbind(a,c(4,5,6))
View(quang)
quang$V1
colnames(quang)
colnames(quang) = c('q','d','e')
quang
quang$q
quang.q
quang['q']
quang
colnames(quang)
quang["q"]
quang[1]
quang[,"q"]
quang[,"d"]
quang[,"e"]
quang["e"]
quang[1,"e"]
quang[,"e"]
quang[,c("e")]
quang[,c("e",'q')]
ta <- quang[,c('e','q')]
ta <- quang[,'e']
ta
ta[1]
ta[2]
names(ta)
ta <- quang[,c('e')]
ta
ta <- quang[,c('e','q')]
quang[0]
quang[1]
quang[2]
quang
quang[3]
View(quang)
quang$q
quang['d']
quang['e']
quang[c('e','d')]
mpg
ggplot(data = mpg, aes(x = displ, y = hwy, colour = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = cyl)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, shape = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = factor(class))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy), color = 'red') + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy), color = "blue") + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = "blue")) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = "red")) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "blue")
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "red")
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "green")
mpg
ggplot(mpg, aes(x=audi)) + geom_bar()
ggplot(mpg, aes(x=manufacturer)) + geom_bar()
ggplot(mpg, aes(x=manufacturer, fill = model)) + geom_bar()
install.packages("reshape2")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("devtools")
g <- ggplot(mpg, aes(x = manufacturer))
g <- ggplot2(mpg, aes(x = manufacturer))
library(ggplot2)
g <- ggplot(mpg, aes(x = manufacturer))
g
g + geom_bar(aes(fill=class)) + coord_map()
mpg
g + geom_bar(aes(fill=model)) + coord_map()
g + geom_bar(aes(fill=model))
g + geom_bar(aes(fill=model)) + coord_flip()
g + geom_bar(aes(fill=model)) + coord_flip() + scale_color_brewer()
g + geom_bar(aes(fill=model)) + coord_flip() + scale_color_gradient2()
g + geom_bar(aes(fill=model), position = 'dodge') + coord_flip() + scale_color_gradient2()
library(readxl)
library(dplyr)
install.packages("dplyr")
install.packages("readxl")
library(readxl)
library(dplyr)
treemap
treemap()
WHO <- read.csv("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/WHO.csv", header=FALSE)
View(WHO)
WHO <- read.csv("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/WHO.csv")
View(WHO)
summarise(WHO)
info(WHO)
summary(WHO)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point()
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(fill = Resion)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(fill = Region)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(fill = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(color = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(color = Country))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Country))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = GNI))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate), color = "blue") + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale), color = 'green')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale), color = 'blue')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Population), color = 'blue')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$LifeExpectancy), color = 'blue')
ggplot(WHO, aes(Country, Population)) + geom_text()
ggplot(WHO, aes(label = Population)) + geom_text()
ggplot(WHO, aes(Country, Population)) + geom_bar()
ggplot(WHO, aes(Region, Population)) + geom_bar()
ggplot(WHO, aes(x = Region)) + geom_bar(fill = Population)
ggplot(WHO, aes(x = Region)) + geom_bar()
ggplot(WHO, aes(x = Region)) + geom_bar(aes(y=Population))
ggplot(WHO, aes(x = Region)) + stat_count(Population)
ggplot(WHO, aes(Region, Population)) + geom_col()
ggplot(WHO, aes(Region, Country)) + geom_col()
ggplot(WHO, aes(Region, Country)) + geom_col()
.libPaths()
version
packageStatus()
update.packages(checkBuilt=TRUE)
y
y
packageStatus()
install.packages('tidyverse')
library('tidyverse')
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = mpg$displ, y = mpg$hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = mpg$displ, y = mpg$hwy, color = mpg$class))
setwd("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/Unit 3 Logistic Regression")
data <- read.csv('quality.csv')
library(caTools)
View(data)
split <- sample.split(data$PoorCare, SplitRatio = 0.75)
train <- subset(data, split==TRUE)
test <- subset(data, split==FALSE)
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTrain, family=binomial)
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=train, family=binomial)
summary(QualityLog)
predictTest = predict(QualityLog, type="response", newdata=qualityTest)
predictTest = predict(QualityLog, type="response", newdata=test)
ROCRpredTest = prediction(predictTest, qualityTest$PoorCare)
ROCRpredTest = prediction(predictTest, test$PoorCare)
library(ROCR)
ROCRpredTest = prediction(predictTest, test$PoorCare)
ROCRperf <- performance(ROCRpredTest, 'tpr','fpr')
plot(ROCRperf)
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=train, family=binomial)
predictTest = predict(QualityLog, type="response", newdata=test)
ROCRpredTest = prediction(predictTest, test$PoorCare)
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
quality <- read.csv('quality.csv')
set.seed(88)
split <- sample.split(quality$PoorCare, SplitRatio = 0.75)
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTrain, family=binomial)
predictTest = predict(QualityLog, type="response", newdata=qualityTest)
ROCRpredTest = prediction(predictTest, qualityTest$PoorCare)
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
?performance
?prediction
performance(ROCRpredTest, "auc")
performance(ROCRpredTest, "auc")@y.values
performance(ROCRpredTest, "auc")@y.name
framingham <- read.csv('framingham.csv')
str(framingham)
set.seed(1000)
split <- sample.split(framingham$TenYearCHD, SplitRatio = 0.65)
framinghamTrain <- subset(framingham, split == TRUE)
train <- framinghamTrain
test <- subset(framinghamm split == FALSE)
test <- subset(framinghamm, split == FALSE)
test <- subset(framingham, split == FALSE)
attach(framingham)
framinghamLog <- glm(TenYearCHD ~ ., data = train, family = binomial)
summary(framinghamLog)
predictTest <- predict(framinghamLog, type = 'response', newdata = test)
table(test$TenYearCHD, predictTest>0.5)
(1069+11)/(1069+6+11+187)
(1069+6)/(1069+6+11+187)
ROCRpred <- prediction(predictTest, test$TenYearCHD)
as.numeric(performance(ROCRpred,'auc')@y.values)
11/(11+187)
1069/(1069+6)
setwd("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/Unit 3 Logistic Regression/Predicting Loan Repayment")
knitr::opts_chunk$set(echo = TRUE)
loans <- read.csv('loans.csv')
loans <- read.csv('loans.csv')
table(loans$not.fully.paid)
loans <- read.csv('loans.csv')
prop.table(loans$not.fully.paid)
loans <- read.csv('loans.csv')
table(loans$not.fully.paid)
loans <- read.csv('loans.csv')
table(loans$not.fully.paid)
1533/(1533+8045)
loans <- read.csv('loans.csv')
table(loans$not.fully.paid)
1533/(1533+8045)
loans <- read.csv('loans.csv')
attach(loans)
table(loans$not.fully.paid)
1533/(1533+8045)
summary(loans)
loans_missing <- subset(loans, is.na(pub.rec) | is.na(days.with.cr.line) | is.na(inq.last.6mths) | is.na(delinq.2yrs))
View(loans_missing)
loans_missing <- subset(loans, is.na(pub.rec) | is.na(days.with.cr.line) | is.na(inq.last.6mths) | is.na(delinq.2yrs))
table(loans_missing$not.fully.paid)
loans_missing <- subset(loans, is.na(pub.rec) | is.na(days.with.cr.line) | is.na(inq.last.6mths) | is.na(delinq.2yrs))
table(loans_missing$not.fully.paid)
3/(26+3)
loans_missing <- subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
table(loans_missing$not.fully.paid)
3/(26+3)
loans_missing <- subset(loans, is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
table(loans_missing$not.fully.paid)
3/(26+3)
loans_missing <- subset(loans, is.na(days.with.cr.line) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
table(loans_missing$not.fully.paid)
3/(26+3)
loans_missing <- subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
table(loans_missing$not.fully.paid)
3/(26+3)
loans_missing <- subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
table(loans_missing$not.fully.paid)
12/(50+12)
missing <- subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
table(missing$not.fully.paid)
12/(50+12)
install.packages("mice")
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
mice(loans[vars.for.imputation])
summary(loans)
knitr::opts_chunk$set(echo = TRUE)
loans <- read.csv('loans.csv')
attach(loans)
table(loans$not.fully.paid)
1533/(1533+8045)
summary(loans)
missing <- subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
table(missing$not.fully.paid)
12/(50+12)
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
library(caTools)
library(caTools)
split <- sample.split(loans, SplitRatio = 0.7)
train <- subset(loans, split==TRUE)
test <- subset(loans, split==FALSE)
notPaidLog <- glm(not.fully.paid ~., data = train, family = binomial)
summary(notPaidLog)
library(caTools)
set.seed(144)
split <- sample.split(loans, SplitRatio = 0.7)
train <- subset(loans, split==TRUE)
test <- subset(loans, split==FALSE)
notPaidLog <- glm(not.fully.paid ~., data = train, family = binomial)
summary(notPaidLog)
library(caTools)
set.seed(144)
split <- sample.split(loans$not.fully.paid, SplitRatio = 0.7)
train <- subset(loans, split==TRUE)
test <- subset(loans, split==FALSE)
notPaidLog <- glm(not.fully.paid ~., data = train, family = binomial)
summary(notPaidLog)
-9.406e-03*(700-710)
-9.406e-03*(700-710)
exp(0.09406)
predicted.risk <- predict(notPaidLog, newdata = test, type = "response")
test$predicted.risk <- predicted.risk
table(test$not.fully.paid, test$predicted.risk>=0.5)
predicted.risk <- predict(notPaidLog, newdata = test, type = "response")
test$predicted.risk <- predicted.risk
table(test$not.fully.paid, test$predicted.risk>=0.5)
(2400+3)/(2400+13+457+3)
predicted.risk <- predict(notPaidLog, newdata = test, type = "response")
test$predicted.risk <- predicted.risk
table(test$not.fully.paid, test$predicted.risk>=0.5)
(2400+3)/(2400+13+457+3)
(2400+13)/(2400+13+457+3)
library(ROCR)
predROCR <- prediction(test$predicted.risk, test$not.fully.paid)
AUC <- performance(predROCR, "auc")
AUC
library(ROCR)
predROCR <- prediction(test$predicted.risk, test$not.fully.paid)
performance(predROCR, "auc")@y.values
bivariateLog <- glm(not.fully.paid ~ int.rate, data = train, family = binomial)
summary(bivariateLog)
bivariatePred <- predict(bivariateLog, newdata = test, type = "response")
max(bivariatePred)
nrow(test)
summary(bivariatePred)
bivaPredROCR <- prediction(bivariatePred, test$not.fully.paid)
performance(bivaPredROCR,"auc")@y.values
bivaPredROCR <- prediction(bivariatePred, test$not.fully.paid)
as.numeric(performance(bivaPredROCR,"auc")@y.values)
library(ROCR)
predROCR <- prediction(test$predicted.risk, test$not.fully.paid)
as.numeric(performance(predROCR, "auc")@y.values)
10*exp(0.06*3)
test$profit <- exp(test$int.rate*3)-1
test$profit[test$not.fully.paid==1] = -1
10*max(test$profit)
View(test)
highInterest  <- subset(test, test$int.rate>=0.15)
mean(highInterest$profit)
highInterest  <- subset(test, test$int.rate>=0.15)
mean(highInterest$profit)
table(highInterest$not.fully.paid)
highInterest  <- subset(test, test$int.rate>=0.15)
mean(highInterest$profit)
table(highInterest$not.fully.paid)
110/(110+327)
cuttoff <- sort(highInterest$predicted.risk, decreasing = FALSE)[100]
selectedLoans <- subset(highInterest, highInterest$predicted.risk < cuttoff)
str(selectedLoans)
selectedLoans <- subset(highInterest, highInterest$predicted.risk <= cuttoff)
str(selectedLoans)
sum(selectedLoans$profit)
table(selectedLoans$not.fully.paid)
sum(selectedLoans$profit[selectedLoans$not.fully.paid==0])-nrow(selectedLoans$profit[selectedLoans$not.fully.paid==1]))
sum(selectedLoans$profit[selectedLoans$not.fully.paid==0])-nrow(selectedLoans$profit[selectedLoans$not.fully.paid==1])
sum(selectedLoans$profit[selectedLoans$not.fully.paid==0])
sum(selectedLoans$profit[selectedLoans$not.fully.paid==0])
nrow(selectedLoans$[selectedLoans$not.fully.paid==1])
sum(selectedLoans$profit[selectedLoans$not.fully.paid==0])
nrow(selectedLoans[selectedLoans$not.fully.paid==1])
sum(selectedLoans$profit[selectedLoans$not.fully.paid==0])
nrow(selectedLoans$profit[selectedLoans$not.fully.paid==1])
sum(selectedLoans$profit[selectedLoans$not.fully.paid==0])
nrow(selectedLoans$profit[selectedLoans$not.fully.paid==1,])
sum(selectedLoans$profit[selectedLoans$not.fully.paid==0])
sum(selectedLoans$profit[selectedLoans$not.fully.paid==0])
selectedLoans$profit[selectedLoans$not.fully.paid==1]
sum(selectedLoans$profit)
View(selectedLoans)
knitr::opts_chunk$set(echo = TRUE)
loans <- read.csv('loans.csv')
attach(loans)
table(loans$not.fully.paid)
1533/(1533+8045)
summary(loans)
missing <- subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
table(missing$not.fully.paid)
12/(50+12)
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
library(caTools)
set.seed(144)
split <- sample.split(loans$not.fully.paid, SplitRatio = 0.7)
train <- subset(loans, split==TRUE)
test <- subset(loans, split==FALSE)
notPaidLog <- glm(not.fully.paid ~., data = train, family = binomial)
summary(notPaidLog)
-9.406e-03*(700-710)
exp(0.09406)
predicted.risk <- predict(notPaidLog, newdata = test, type = "response")
test$predicted.risk <- predicted.risk
table(test$not.fully.paid, test$predicted.risk>=0.5)
(2400+3)/(2400+13+457+3)
(2400+13)/(2400+13+457+3)
library(ROCR)
predROCR <- prediction(test$predicted.risk, test$not.fully.paid)
as.numeric(performance(predROCR, "auc")@y.values)
bivariateLog <- glm(not.fully.paid ~ int.rate, data = train, family = binomial)
summary(bivariateLog)
bivariatePred <- predict(bivariateLog, newdata = test, type = "response")
max(bivariatePred)
summary(bivariatePred)
bivaPredROCR <- prediction(bivariatePred, test$not.fully.paid)
as.numeric(performance(bivaPredROCR,"auc")@y.values)
10*exp(0.06*3)
test$profit <- exp(test$int.rate*3)-1
test$profit[test$not.fully.paid==1] = -1
10*max(test$profit)
highInterest  <- subset(test, test$int.rate>=0.15)
mean(highInterest$profit)
table(highInterest$not.fully.paid)
110/(110+327)
cuttoff <- sort(highInterest$predicted.risk, decreasing = FALSE)[100]
selectedLoans <- subset(highInterest, highInterest$predicted.risk <= cuttoff)
str(selectedLoans)
sum(selectedLoans$profit)
table(selectedLoans$not.fully.paid)
View(selectedLoans)
# library(mice)
# set.seed(144)
# vars.for.imputation = setdiff(names(loans), "not.fully.paid")
# imputed = complete(mice(loans[vars.for.imputation]))
# loans[vars.for.imputation] = imputed
loans <- read.csv('loans_imputed.csv')
knitr::opts_chunk$set(echo = TRUE)
loans <- read.csv('loans.csv')
attach(loans)
table(loans$not.fully.paid)
1533/(1533+8045)
summary(loans)
missing <- subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
table(missing$not.fully.paid)
12/(50+12)
# library(mice)
# set.seed(144)
# vars.for.imputation = setdiff(names(loans), "not.fully.paid")
# imputed = complete(mice(loans[vars.for.imputation]))
# loans[vars.for.imputation] = imputed
loans <- read.csv('loans_imputed.csv')
library(caTools)
set.seed(144)
split <- sample.split(loans$not.fully.paid, SplitRatio = 0.7)
train <- subset(loans, split==TRUE)
test <- subset(loans, split==FALSE)
notPaidLog <- glm(not.fully.paid ~., data = train, family = binomial)
summary(notPaidLog)
-9.406e-03*(700-710)
exp(0.09406)
predicted.risk <- predict(notPaidLog, newdata = test, type = "response")
test$predicted.risk <- predicted.risk
table(test$not.fully.paid, test$predicted.risk>=0.5)
(2400+3)/(2400+13+457+3)
(2400+13)/(2400+13+457+3)
library(ROCR)
predROCR <- prediction(test$predicted.risk, test$not.fully.paid)
as.numeric(performance(predROCR, "auc")@y.values)
bivariateLog <- glm(not.fully.paid ~ int.rate, data = train, family = binomial)
summary(bivariateLog)
bivariatePred <- predict(bivariateLog, newdata = test, type = "response")
max(bivariatePred)
summary(bivariatePred)
bivaPredROCR <- prediction(bivariatePred, test$not.fully.paid)
as.numeric(performance(bivaPredROCR,"auc")@y.values)
10*exp(0.06*3)
test$profit <- exp(test$int.rate*3)-1
test$profit[test$not.fully.paid==1] = -1
10*max(test$profit)
highInterest  <- subset(test, test$int.rate>=0.15)
mean(highInterest$profit)
table(highInterest$not.fully.paid)
110/(110+327)
cuttoff <- sort(highInterest$predicted.risk, decreasing = FALSE)[100]
selectedLoans <- subset(highInterest, highInterest$predicted.risk <= cuttoff)
str(selectedLoans)
sum(selectedLoans$profit)
table(selectedLoans$not.fully.paid)
