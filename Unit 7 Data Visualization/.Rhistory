View(quang)
quang$q
quang['d']
quang['e']
quang[c('e','d')]
mpg
ggplot(data = mpg, aes(x = displ, y = hwy, colour = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = cyl)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, shape = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = factor(class))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy), color = 'red') + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy), color = "blue") + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = "blue")) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = "red")) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "blue")
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "red")
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "green")
mpg
ggplot(mpg, aes(x=audi)) + geom_bar()
ggplot(mpg, aes(x=manufacturer)) + geom_bar()
ggplot(mpg, aes(x=manufacturer, fill = model)) + geom_bar()
install.packages("reshape2")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("devtools")
g <- ggplot(mpg, aes(x = manufacturer))
g <- ggplot2(mpg, aes(x = manufacturer))
library(ggplot2)
g <- ggplot(mpg, aes(x = manufacturer))
g
g + geom_bar(aes(fill=class)) + coord_map()
mpg
g + geom_bar(aes(fill=model)) + coord_map()
g + geom_bar(aes(fill=model))
g + geom_bar(aes(fill=model)) + coord_flip()
g + geom_bar(aes(fill=model)) + coord_flip() + scale_color_brewer()
g + geom_bar(aes(fill=model)) + coord_flip() + scale_color_gradient2()
g + geom_bar(aes(fill=model), position = 'dodge') + coord_flip() + scale_color_gradient2()
library(readxl)
library(dplyr)
install.packages("dplyr")
install.packages("readxl")
library(readxl)
library(dplyr)
treemap
treemap()
WHO <- read.csv("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/WHO.csv", header=FALSE)
View(WHO)
WHO <- read.csv("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/WHO.csv")
View(WHO)
summarise(WHO)
info(WHO)
summary(WHO)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point()
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(fill = Resion)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(fill = Region)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(fill = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(color = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(color = Country))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Country))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = GNI))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate), color = "blue") + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale), color = 'green')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale), color = 'blue')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Population), color = 'blue')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$LifeExpectancy), color = 'blue')
ggplot(WHO, aes(Country, Population)) + geom_text()
ggplot(WHO, aes(label = Population)) + geom_text()
ggplot(WHO, aes(Country, Population)) + geom_bar()
ggplot(WHO, aes(Region, Population)) + geom_bar()
ggplot(WHO, aes(x = Region)) + geom_bar(fill = Population)
ggplot(WHO, aes(x = Region)) + geom_bar()
ggplot(WHO, aes(x = Region)) + geom_bar(aes(y=Population))
ggplot(WHO, aes(x = Region)) + stat_count(Population)
ggplot(WHO, aes(Region, Population)) + geom_col()
ggplot(WHO, aes(Region, Country)) + geom_col()
ggplot(WHO, aes(Region, Country)) + geom_col()
.libPaths()
version
packageStatus()
update.packages(checkBuilt=TRUE)
y
y
packageStatus()
install.packages('tidyverse')
library('tidyverse')
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = mpg$displ, y = mpg$hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = mpg$displ, y = mpg$hwy, color = mpg$class))
setwd("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/Unit 6 Clustering/Assignments/Cluster and then Predict Stock Return")
knitr::opts_chunk$set(echo = TRUE, comment = NA, results = "hold", message = FALSE, warning = FALSE)
stocks <- read.csv("StocksCluster.csv")
str(stocks)
table(stocks$PositiveDec)
(6324)/(6324+5256)
library(corrplot)
corMat <- cor(stocks[,1:11])
corrplot.mixed(corMat, lower = "color", upper = "number", order = "hclust")
summary(stocks)
library(caTools)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain <- subset(stocks, spl == TRUE)
stocksTest <- subset(stocks, spl == FALSE)
StocksModel <- glm(PositiveDec ~ ., data = stocksTrain, family = "binomial")
trainPred <- predict(StocksModel)
table(stocksTrain$PositiveDec, trainsPred >= 0.5)
library(caTools)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain <- subset(stocks, spl == TRUE)
stocksTest <- subset(stocks, spl == FALSE)
StocksModel <- glm(PositiveDec ~ ., data = stocksTrain, family = "binomial")
trainPred <- predict(StocksModel)
table(stocksTrain$PositiveDec, trainPred >= 0.5)
library(caTools)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain <- subset(stocks, spl == TRUE)
stocksTest <- subset(stocks, spl == FALSE)
StocksModel <- glm(PositiveDec ~ ., data = stocksTrain, family = "binomial")
trainPred <- predict(StocksModel)
table(stocksTrain$PositiveDec, trainPred >= 0.5)
(3324+737)/(3324+737+355+3690)
testPred <- predict(StocksModel, newdata = stocksTest)
table(stocksTest$PositiveDec, testPred >= 0.5)
testPred <- predict(StocksModel, newdata = stocksTest)
table(stocksTest$PositiveDec, testPred >= 0.5)
(1427+312)/(1427+312+150+1585)
table(stocksTest$PositiveDec)
table(stocksTest$PositiveDec)
1897/(1577+1897)
library(caret)
prepoc <- preProcess(limitedTrain)
limitedTrain <- stocksTrain
limitedTrain$PositiveDec <- NULL
limitedTest <- stocksTest
limitedTest$PositiveDec <- NULL
library(caret)
prepoc <- preProcess(limitedTrain)
normTrain <- predict(prepoc, limitedTrain)
normTest <- predict(prepoc, limitedTest)
summary(normTrain)
summary(normTrain)
summary(normTest)
km <- kmeans(normTrain, centers = 3)
table(km$cluster)
library(flexclust)
install.packages("flexclust")
library(caTools)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain <- subset(stocks, spl == TRUE)
stocksTest <- subset(stocks, spl == FALSE)
StocksModel <- glm(PositiveDec ~ ., data = stocksTrain, family = "binomial")
trainPred <- predict(StocksModel)
table(stocksTrain$PositiveDec, trainPred >= 0.5)
(3324+737)/(3324+737+355+3690)
library(caTools)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain <- subset(stocks, spl == TRUE)
stocksTest <- subset(stocks, spl == FALSE)
StocksModel <- glm(PositiveDec ~ ., data = stocksTrain, family = "binomial")
trainPred <- predict(StocksModel, type = "response")
table(stocksTrain$PositiveDec, trainPred >= 0.5)
(3324+737)/(3324+737+355+3690)
library(caTools)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain <- subset(stocks, spl == TRUE)
stocksTest <- subset(stocks, spl == FALSE)
StocksModel <- glm(PositiveDec ~ ., data = stocksTrain, family = "binomial")
trainPred <- predict(StocksModel, type = "response")
table(stocksTrain$PositiveDec, trainPred >= 0.5)
(990+3640)/(990+3640+2689+787)
testPred <- predict(StocksModel, newdata = stocksTest, type = "response")
table(stocksTest$PositiveDec, testPred >= 0.5)
(1427+312)/(1427+312+150+1585)
testPred <- predict(StocksModel, newdata = stocksTest, type = "response")
table(stocksTest$PositiveDec, testPred >= 0.5)
(417+1533)/(417+1533+344+1160)
testPred <- predict(StocksModel, newdata = stocksTest, type = "response")
table(stocksTest$PositiveDec, testPred >= 0.5)
(417+1553)/(417+1553+344+1160)
set.seed(144)
km <- kmeans(normTrain, centers = 3)
table(km$cluster)
install.packages("flexclust")
library(flexclust)
km.kcca <- as.kcca(km, normTrain)
clusterTrain <- predict(km.kcca)
clusterTest <- predict(km.kcca, newdata = normTest)
table(clusterTest)
stocksTrain1 <- subset(stocksTrain, clusterTrain==1)
stocksTrain2 <- subset(stocksTrain, clusterTrain==2)
stocksTrain3 <- subset(stocksTrain, clusterTrain==3)
stocksTest1 <- subset(stocksTest1, clusterTest==1)
stocksTrain1 <- subset(stocksTrain, clusterTrain==1)
stocksTrain2 <- subset(stocksTrain, clusterTrain==2)
stocksTrain3 <- subset(stocksTrain, clusterTrain==3)
stocksTest1 <- subset(stocksTest, clusterTest==1)
stocksTest2 <- subset(stocksTest, clusterTest==2)
stocksTest3 <- subset(stocksTest, clusterTest==3)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain2$PositiveDec)
mean(stocksTrain3$PositiveDec)
StocksModel1 <- glm(PositiveDec ~., data = stocksTrain1, family = "binomial")
StocksModel2 <- glm(PositiveDec ~., data = stocksTrain2, family = "binomial")
StocksModel3 <- glm(PositiveDec ~., data = stocksTrain3, family = "binomial")
summary(StocksModel1)
summary(StocksModel2)
summary(StocksModel3)
PredictTest1 <- predict(StocksModel, newdata = stocksTest1, type = "response")
PredictTest1 <- predict(StocksModel1, newdata = stocksTest1, type = "response")
PredictTest2 <- predict(StocksModel2, newdata = stocksTest2, type = "response")
PredictTest3 <- predict(StocksModel3, newdata = stocksTest3, type = "response")
PredictTest1 <- predict(StocksModel1, newdata = stocksTest1, type = "response")
PredictTest2 <- predict(StocksModel2, newdata = stocksTest2, type = "response")
PredictTest3 <- predict(StocksModel3, newdata = stocksTest3, type = "response")
table(stocksTest1$PositiveDec, PredictTest1>=0.5)
PredictTest1 <- predict(StocksModel1, newdata = stocksTest1, type = "response")
PredictTest2 <- predict(StocksModel2, newdata = stocksTest2, type = "response")
PredictTest3 <- predict(StocksModel3, newdata = stocksTest3, type = "response")
table(stocksTest1$PositiveDec, PredictTest1>=0.5)
(30+774)/(30+774+471+23)
table(stocksTest2$PositiveDec, PredictTest2>=0.5)
table(stocksTest3$PositiveDec, PredictTest3>=0.5)
table(stocksTest2$PositiveDec, PredictTest2>=0.5)
table(stocksTest3$PositiveDec, PredictTest3>=0.5)
(388+757)/(388+757+626+309)
(49+13)/(49+13+21+13)
AllPredictions <- c(PredictTest1, PredictTest2, PredictTest3)
AllOutcomes <- c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
table(AllOutcomes, AllPredictions >= 0.5)
table(AllOutcomes, AllPredictions >= 0.5)
(467+1544)/(467+1544+1110+353)
setwd("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/Unit 7 Data Visualization")
source('~/.active-rstudio-document', echo=TRUE)
plot(who$GNI, who$FertilityRate)
ggplot(who) + geom_point(aes(GNI, FertilitiRate))
attach(who)
scatter <- ggplot(who) + geom_point(aes(GNI, FertilitiRate))
scatter
scatter <- ggplot(who) + geom_point(aes(GNI, FertilityRate))
scatter
scatter <- ggplot(who) + geom_point(aes(GNI, FertilityRate))
scatter
scatter <- ggplot(who, aes(x = GNI, y = FertilityRate))
scatter + geom_point()
scatter + geom_line()
scatter + geom_point(color="blue", size=3, shape=17)
scatter + geom_point(color="darkred", size=3, shape=8)
scatter + geom_point(color="darkred", size=3, shape=8) + ggtitle("Fertility Rate vs Gross National Income")
fertilityGNIPlot <- scatter + geom_point(color="darkred", size=3, shape=8) + ggtitle("Fertility Rate vs Gross National Income")
pdf("MyPlot.pdf")
print(fertilityGNIPlot)
dev.off()
fertilityGNIPlot <- scatter + geom_point(color="darkred", size=3, shape=15) + ggtitle("Fertility Rate vs Gross National Income")
fertilityGNIPlot <- scatter + geom_point(color="darkred", size=3, shape=15) + ggtitle("Fertility Rate vs Gross National Income")
pdf("MyPlot.pdf")
print(fertilityGNIPlot)
dev.off()
fertilityGNIPlot <- scatter + geom_point(color="darkred", size=3, shape=3) + ggtitle("Fertility Rate vs Gross National Income")
pdf("MyPlot.pdf")
print(fertilityGNIPlot)
dev.off()
ggplot(who, aes(x = GNI, y = FertilityRate, color = Region)) + geom_point()
ggplot(who, aes(x = GNI, y = FertilityRate, color = LifeExpectancy)) + geom_point()
ggplot(who, aes(x = FertilityRate, y = Under15)) + geom_point()
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point()
model <- lm(Under15 ~ FertilityRate, data = who)
summary(model)
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + geom_abline()
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + geom_smooth()
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm")
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", level = 0.99)
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", se = FALSE)
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm")
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", level = 0.99)
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", se = FALSE)
ggplot(who, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", se = FALSE, color = "red")
ggplot(who, aes(x = log(FertilityRate), y = Under15, color = Region)) + geom_point()
ggplot(who, aes(x = log(FertilityRate), y = Under15, color = Region)) + geom_point() + scale_color_brewer(palette="Dark2")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mvt$Date <- strptime(mvt$Date, format = %m/%d/%y %H:%M")
mvt$Date <- strptime(mvt$Date, format = %m/%d/%y %H:%M")
mvt$Date <- strptime(mvt$Date, format = "%m/%d/%y %H:%M")
mvt$Hour <- mvt$Date$hour
str(mvt)
mvt$Weekday <- weekdays(mvt$Date)
mvt$Hour <- mvt$Date$hour
str(mvt)
table(mvt$Weekday)
WeekdayCounts <- as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
View(WeekdayCounts)
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line()
View(WeekdayCounts)
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_bar()
View(mvt)
ggplot(mvt) + geom_bar(aes(Weekday))
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line()
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line(group=1)
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line(group=1, color = "blue")
WeekdayCounts$Var1 <- factor(WeekdayCounts$Var1, ordered = TRUE, levels=c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line(group=1, color = "blue")
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line(group=1, color = "blue") + xlab("Day of the Week") + ylab("Total Vehicale Thefts")
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line(group=1, color="blue", linetype=2) + xlab("Day of the Week") + ylab("Total Vehicale Thefts")
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line(group=1, color="blue", alpha=0.3) + xlab("Day of the Week") + ylab("Total Vehicale Thefts")
table(mvt$Weekday, mvt$Hour)
DayHourCounts <- as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHourCounts)
DayHourCounts$Hour <- as.numeric(as.character(DayHourCounts$Var2))
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(group=1)
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=1))
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=1))
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1))
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color = Var1))
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color = Var1), size=2)
View(WeekdayCounts)
View(DayHourCounts)
DayHourCounts$Var1 <- factor(DayHourCounts, ordered = TRUE, levels=c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
DayHourCounts$Var1 <- factor(DayHourCounts, ordered = TRUE, levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
str(DayHourCounts)
ggplot(DayHourCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq))
DayHourCounts$Var1 <- factor(DayHourCounts$Var1, ordered = TRUE, levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
str(DayHourCounts)
ggplot(DayHourCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq))
WeekdayCounts$Var1 <- factor(WeekdayCounts$Var1, ordered = TRUE, levels=c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line(group=1, color="blue", alpha=0.3) + xlab("Day of the Week") + ylab("Total Vehicale Thefts")
DayHourCounts <- as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHourCounts)
DayHourCounts$Hour <- as.numeric(as.character(DayHourCounts$Var2))
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color = Var1), size=2)
DayHourCounts$Var1 <- factor(DayHourCounts$Var1, ordered = TRUE, levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
str(DayHourCounts)
ggplot(DayHourCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq))
ggplot(DayHourCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq)) + scale_fill_gradient(name="Total MV Thefts") + theme(axis.title.y = element_blank())
ggplot(DayHourCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq)) + scale_fill_gradient(name="Total MV Thefts", low = "white", high = "red") + theme(axis.title.y = element_blank())
ggplot(DayHourCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq)) + scale_fill_gradient(name="Total MV Thefts", low = "blue", high = "red") + theme(axis.title.y = element_blank())
ggplot(DayHourCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq)) + scale_fill_gradient(name="Total MV Thefts", low = "white", high = "red") + theme(axis.title.y = element_blank())
ggplot(DayHourCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq)) + scale_fill_gradient(name="Total MV Thefts", low = "white", high = "black") + theme(axis.title.y = element_blank())
install.packages("maps")
install.packages("ggmap")
library(ggmap)
library(ggmap)
chicago <- get_map(location = "chicago", zoom = 11)
ggmap(chicago)
ggmap(chicago) + geom_point(data=mvt[1:100,], aes(x=LONGTITUDE, y=LATITUDE))
ggmap(chicago) + geom_point(data=mvt[1:100,], aes(x=LONTITUDE, y=LATITUDE))
attach(mvt)
ggmap(chicago) + geom_point(data=mvt[1:100,], aes(x=Longitude, y=Latitude))
ggmap(chicago) + geom_point(data=mvt[1:1000,], aes(x=Longitude, y=Latitude))
ggmap(chicago) + geom_point(data=mvt[1:10000,], aes(x=Longitude, y=Latitude))
ggmap(chicago) + geom_point(data=mvt[1:100,], aes(x=Longitude, y=Latitude))
LatLonCounts <- as.data.frame(table(round(mvt$Latitude,2)), table(round(mvt$Longitude,2)))
LatLonCounts <- as.data.frame(table(round(mvt$Latitude,2), round(mvt$Longitude,2)))
View(LatLonCounts)
str(LatLonCounts)
LatLonCounts$Lat <- as.numeric(as.character(LatLonCounts$Var2))
LatLonCounts$Lon <- as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat <- as.numeric(as.character(LatLonCounts$Var2))
ggmap(chicago) + geom_point(data=LatLonCounts, aes(Lon, Lat, color=Freq, size=Freq))
ggmap(chicago) + geom_point(data=LatLonCounts, aes(x=Lon, y=Lat, color=Freq, size=Freq))
View(LatLonCounts)
ggmap(chicago) + geom_point(data=mvt[1:100,], aes(x=Longitude, y=Latitude))
ggmap(chicago) + geom_point(data=LatLonCounts, aes(x=Lon, y=Lat))
ggmap(chicago) + geom_point(data=LatLonCounts, aes(x=Var1, y=Var2))
ggmap(chicago) + geom_point(data=LatLonCounts, aes(x=Lon, y=Lat)
ggmap(chicago) + geom_point(data=LatLonCounts, aes(x=Lon, y=Lat))
ggmap(chicago)
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x=Lon, y=Lat))
View(LatLonCounts)
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x=Var1, y=Var2))
ggmap(chicago) + geom_point(data = LatLonCounts[1:10,], aes(x=Var1, y=Var2))
LatLonCounts$Lon <- as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat <- as.numeric(as.character(LatLonCounts$Var2))
ggmap(chicago) + geom_point(data = LatLonCounts[1:10,], aes(x=Var1, y=Var2))
ggmap(chicago) + geom_point(data = LatLonCounts[1:10,], aes(x=Lon, y=Lat))
mvt = read.csv("mvt.csv", stringsAsFactors=FALSE)
str(mvt)
mvt$Date = strptime(mvt$Date, format="%m/%d/%y %H:%M")
mvt$Weekday = weekdays(mvt$Date)
mvt$Hour = mvt$Date$hour
str(mvt)
table(mvt$Weekday)
WeekdayCounts = as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
library(ggplot2)
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday"))
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1)) + xlab("Day of the Week") + ylab("Total Motor Vehicle Thefts")
table(mvt$Weekday, mvt$Hour)
DayHourCounts = as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHourCounts)
DayHourCounts$Hour = as.numeric(as.character(DayHourCounts$Var2))
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1))
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Var1), size=2)
DayHourCounts$Type = ifelse((DayHourCounts$Var1 == "Sunday") | (DayHourCounts$Var1 == "Saturday"), "Weekend", "Weekday")
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Type), size=2)
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Type), size=2, alpha=0.5)
DayHourCounts$Var1 = factor(DayHourCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq))
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name="Total MV Thefts") + theme(axis.title.y = element_blank())
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name="Total MV Thefts", low="white", high="red") + theme(axis.title.y = element_blank())
install.packages("maps")
install.packages("maps")
library(maps)
library(ggmap)
chicago = get_map(location = "chicago", zoom = 11)
ggmap(chicago)
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))
LatLonCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
str(LatLonCounts)
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq))
source('~/.active-rstudio-document', echo=TRUE)
ggmap(chicago) + geom_point(data = LatLonCounts[1:10,], aes(x=Lon, y=Lat))
ggmap(chicago) + geom_point(data = LatLonCounts[1:10,], aes(x=Lon, y=Lat))
mvt <- read.csv("mvt.csv", stringsAsFactors = FALSE)
str(mvt)
mvt$Date <- strptime(mvt$Date, format = "%m/%d/%y %H:%M")
mvt$Weekday <- weekdays(mvt$Date)
mvt$Hour <- mvt$Date$hour
str(mvt)
table(mvt$Weekday)
WeekdayCounts <- as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line(aes(group=1), color = "blue") + xlab("Day of the Week") + ylab("Total Vehicale Thefts")
WeekdayCounts$Var1 <- factor(WeekdayCounts$Var1, ordered = TRUE, levels=c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
ggplot(WeekdayCounts, aes(Var1, Freq)) + geom_line(group=1, color="blue", alpha=0.3) + xlab("Day of the Week") + ylab("Total Vehicale Thefts")
DayHourCounts <- as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHourCounts)
DayHourCounts$Hour <- as.numeric(as.character(DayHourCounts$Var2))
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color = Var1), size=2)
DayHourCounts$Var1 <- factor(DayHourCounts$Var1, ordered = TRUE, levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
str(DayHourCounts)
ggplot(DayHourCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq))
ggplot(DayHourCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq)) + scale_fill_gradient(name="Total MV Thefts", low = "white", high = "black") + theme(axis.title.y = element_blank())
library(ggmap)
chicago <- get_map(location = "chicago", zoom = 11)
ggmap(chicago) + geom_point(data=mvt[1:100,], aes(x=Longitude, y=Latitude))
LatLonCounts <- as.data.frame(table(round(mvt$Latitude,2), round(mvt$Longitude,2)))
str(LatLonCounts)
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq))
source('~/.active-rstudio-document', echo=TRUE)
LatLonCounts <- as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
str(LatLonCounts)
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq))
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq)) + scale_color_gradient(low = "yellow", high = "red")
ggmap(chicago) + geom_tile(data = LatLonCounts, aes(x = Long, y = Lat, alpha = Freq)) + scale_color_gradient(low = "yellow", high = "red")
ggmap(chicago) + geom_tile(data = LatLonCounts, aes(x = Long, y = Lat, alpha = Freq), fill = "red")
ggmap(chicago) + geom_tile(data = LatLonCounts2, aes(x = Long, y = Lat, alpha = Freq), fill = "red")
LatLonCounts2 <- subset(LatLonCounts, LatLonCounts$Freq > 0)
ggmap(chicago) + geom_tile(data = LatLonCounts2, aes(x = Long, y = Lat, alpha = Freq), fill = "red")
1638-686
source('~/.active-rstudio-document', echo=TRUE)
statesMap <- map_data("state")
library(ggmap)
library(maps)
install.packages("maps")
install.packages("maps")
library(maps)
murders <- read.csv("murders.csv")
str(murders)
statesMap <- map_data("state")
library(ggmap)
statesMap <- map_data("state")
str(statesMap)
library(ggplot2)
ggplot(statesMap, aes(long, lat, group=group)) + geom_polygon(fill="white", color="black")
murders$Region <- tolower(murders$State)
murdersMap <- merge(statesMap, murders, by="Region")
murders$region <- tolower(murders$State)
source('~/.active-rstudio-document', echo=TRUE)
str(murdersMap)
ggplot(murdersMap, aes(x=long, y=lat, fill=Murders)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend")
ggplot(murdersMap, aes(x=long, y=lat, group=group, fill=Murders)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend")
ggplot(murdersMap, aes(x=long, y=lat, group=group, fill=Population)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend")
murdersMap$MurderRate <- murdersMap$Murders/murdersMap$Population*100000
ggplot(murdersMap, aes(x=long, y=lat, group=group, fill=MurderRate)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend")
ggplot(murdersMap, aes(x=long, y=lat, group=group, fill=MurderRate)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend", limits=c(0,10))
ggplot(murdersMap, aes(x=long, y=lat, group=group, fill=GunOwnership)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend")
max(murdersMap$GunOwnership)
which.max(murdersMap$GunOwnership)
murdersMap[15470]
murdersMap[15470,]
murdersMap[murdersMap$region="montana",]
murdersMap[murdersMap$region=="montana",]
murders[murders$region=="montana",]
murders[which.max(murders$GunOwnership),]
