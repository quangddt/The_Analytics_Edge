ggplot(df, aes(y)) + geom_histogram(bins = 50)
ggplot(df, aes(y)) + geom_histogram(bins = 20)
ggplot(df, aes(y)) + geom_histogram(bins = 30)
ggplot(df, aes(y)) + geom_histogram(bins = 25)
ggplot(df, aes(y)) + geom_histogram(bins = 20)
ggplot(df, aes(y)) + geom_histogram(bins = 15)
ggplot(df, aes(y)) + geom_histogram(bins = 10)
ggplot(df, aes(y)) + geom_histogram(bins = 5)
ggplot(df, aes(y)) + geom_histogram(bins = 30)
ggplot(df, aes(y)) + geom_histogram(bins = 5)
ggplot(df, aes(x=y)) + geom_histogram(bins = 5)
ggplot(df, aes(x=gp)) + geom_bar()
df <- cars
head(cars)
load(mtcars)
df <- mtcars
base <- ggplot(df, aes(dist,hwy)) + geom_point()
base
View(df)
base <- ggplot(df, aes(disp,hp)) + geom_point()
base
mpg
datasets::mtcars
house
mog
mpg
base <- ggplot(mpg, aes(displ,hwy)) + geom_point()
base
base + geom_smooth()
base + geom_smooth(method = 'lm')
base + geom_smooth()
base + subset(mpg, fl=='p')
base %+% subset(mpg, fl=='p')
base
base + list(subset(mpg, fl=='p'), geom_smooth())
qplot(mpg, wt, data = mtcars)
qplot(mpg, wt, data = mtcars, colour = am)
qplot(mpg, wt, data = mtcars, size = am)
qplot(mpg, wt, data = mtcars, fill = am)
qplot(mpg, wt, data = mtcars, fill = cyl)
qplot(mpg, wt, data = mtcars, size = cyl)
qplot(mpg, wt, data = mtcars, colour = cyl)
ggplot(mtcars, aes(cyl)) + geom_bar()
ggplot(mtcars, aes(factor(cyl)) + geom_bar()
a
ggplot(mtcars, aes(factor(cyl)) + geom_bar()
a
ggplot(mtcars, aes(factor(cyl))) + geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(am))) + geom_bar()
qplot(mpg, wt, data = mtcars, colour = cyl)
qplot(mpg, wt, data = mtcars, shape = cyl)
qplot(mpg, wt, data = mtcars, shape = factor(cyl))
qplot(mpg, wt, data = mtcars, colour = factor(cyl))
df.team_data <- expand.grid(teams = c("Team A", "Team B", "Team C", "Team D")
,metrics = c("Metric 1", "Metric 2", "Metric 3", "Metric 4", "Metric 5")
)
View(df.team_data)
df.team_data$performance <- rnorm(nrow(df.team_data))
ggplot(data = df.team_data, aes(x = metrics, y = teams)) +
geom_tile(aes(fill = performance))
df.isi <- expand.grid(carrier_number = c('0':'47'))
View(df.isi)
df.isi <- expand.grid(carrier_number = c('0':'47'), carrier_number = c('0':'47'))
df.isi <- expand.grid(carrier number = c('0':'47'), carrier number = c('0':'47'))
df.isi <- expand.grid(carrier_number1 = c('0':'47'), carrier_number2 = c('0':'47'))
48*48
ISI <- read.table("~/OneDrive/Documents/Matlab files/Thesis/InterferencePatternGFDM/ISI.csv", quote="\"", comment.char="")
View(ISI)
ISI$V1
View(df.isi)
df.isi$ISI = ISI$V1
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_tile(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2), xlab('carrier number'), ylab('carrier number')) + geom_raster(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2), xlab='carrier number', ylab='carrier number') + geom_raster(aes(fill = ISI))
luv_colours
xlab('quang')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2), xlab='carrier number', ylab='carrier number') + geom_raster(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2), xlab='carrier number', ylab='carrier number') + geom_rect(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2), xlab='carrier number', ylab='carrier number') + geom_raster(aes(fill = ISI))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2()
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient()
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2()
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2(low = 'red', high = 'blue')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2(low = 'blue', high = 'red')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2, colours = terrain.colors(10))) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2(low = 'blue', high = 'red')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradient2(low = 'blue', high = 'red',colours = terrain.colors(10))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = terrain.colors(10))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = terrain.colors(1))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = terrain.colors(2))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = terrain.colors(20))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = terrain.colors(50))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller()
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'spectral')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'Spectral')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'BrBg')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'BrBG')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'PiYG')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'PrGn')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'PRGn')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'PuOr')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RdBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlGnBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RlBnYu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOnRu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOnRd')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOrRd')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOrRd', direction = -1)
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'YlOrRd', direction = 1)
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RdYlBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RdGlBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_distiller(palette = 'RdYlBu')
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = rainbow(4))
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
jet.colors(1)
jet.colors(7)
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(7))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(1))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(2))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(3))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(5))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(7))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(8))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(10))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(15))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(30))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(12))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn(colours = jet.colors(7))
ggplot(data = df.isi, aes(x=carrier_number1, y=carrier_number2)) + geom_raster(aes(fill = ISI)) + labs(x = 'carrier number', y = 'carrier number', fill = 'ISI power') + scale_fill_gradientn()
sd(c(5,8,12))
which.min(c(4,1,6))
which.max(c(4,1,6))
Sys.setlocale("LC_ALL","C")
rbind?
ds
help("rbind")
ISI
df.isi
df
a <- c(1,2,3)
rbind(c,12)
cbind(1,1:7)
rbind(1,1:7)
rbind(1,1:22)
rbind(2*2,1:22)
a <- c(1,2,3)
a
rbind(a,c(4,5,6))
quang <- rbind(a,c(4,5,6))
View(quang)
quang$V1
colnames(quang)
colnames(quang) = c('q','d','e')
quang
quang$q
quang.q
quang['q']
quang
colnames(quang)
quang["q"]
quang[1]
quang[,"q"]
quang[,"d"]
quang[,"e"]
quang["e"]
quang[1,"e"]
quang[,"e"]
quang[,c("e")]
quang[,c("e",'q')]
ta <- quang[,c('e','q')]
ta <- quang[,'e']
ta
ta[1]
ta[2]
names(ta)
ta <- quang[,c('e')]
ta
ta <- quang[,c('e','q')]
quang[0]
quang[1]
quang[2]
quang
quang[3]
View(quang)
quang$q
quang['d']
quang['e']
quang[c('e','d')]
mpg
ggplot(data = mpg, aes(x = displ, y = hwy, colour = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = cyl)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, shape = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = factor(cyl))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = factor(class))) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, alpha = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy), color = 'red') + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy), color = "blue") + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = "blue")) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = "red")) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "blue")
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "red")
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "green")
mpg
ggplot(mpg, aes(x=audi)) + geom_bar()
ggplot(mpg, aes(x=manufacturer)) + geom_bar()
ggplot(mpg, aes(x=manufacturer, fill = model)) + geom_bar()
install.packages("reshape2")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("devtools")
g <- ggplot(mpg, aes(x = manufacturer))
g <- ggplot2(mpg, aes(x = manufacturer))
library(ggplot2)
g <- ggplot(mpg, aes(x = manufacturer))
g
g + geom_bar(aes(fill=class)) + coord_map()
mpg
g + geom_bar(aes(fill=model)) + coord_map()
g + geom_bar(aes(fill=model))
g + geom_bar(aes(fill=model)) + coord_flip()
g + geom_bar(aes(fill=model)) + coord_flip() + scale_color_brewer()
g + geom_bar(aes(fill=model)) + coord_flip() + scale_color_gradient2()
g + geom_bar(aes(fill=model), position = 'dodge') + coord_flip() + scale_color_gradient2()
library(readxl)
library(dplyr)
install.packages("dplyr")
install.packages("readxl")
library(readxl)
library(dplyr)
treemap
treemap()
WHO <- read.csv("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/WHO.csv", header=FALSE)
View(WHO)
WHO <- read.csv("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/WHO.csv")
View(WHO)
summarise(WHO)
info(WHO)
summary(WHO)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point()
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(fill = Resion)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(fill = Region)
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(fill = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(color = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(color = Country))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Country))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Region))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = GNI))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate), color = "blue") + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale))
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale), color = 'green')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$PrimarySchoolEnrollmentMale + WHO$PrimarySchoolEnrollmentFemale), color = 'blue')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = Population), color = 'blue')
ggplot(WHO, aes(x = WHO$CellularSubscribers, y=WHO$LiteracyRate)) + geom_point(aes(size = WHO$LifeExpectancy), color = 'blue')
ggplot(WHO, aes(Country, Population)) + geom_text()
ggplot(WHO, aes(label = Population)) + geom_text()
ggplot(WHO, aes(Country, Population)) + geom_bar()
ggplot(WHO, aes(Region, Population)) + geom_bar()
ggplot(WHO, aes(x = Region)) + geom_bar(fill = Population)
ggplot(WHO, aes(x = Region)) + geom_bar()
ggplot(WHO, aes(x = Region)) + geom_bar(aes(y=Population))
ggplot(WHO, aes(x = Region)) + stat_count(Population)
ggplot(WHO, aes(Region, Population)) + geom_col()
ggplot(WHO, aes(Region, Country)) + geom_col()
ggplot(WHO, aes(Region, Country)) + geom_col()
.libPaths()
version
packageStatus()
update.packages(checkBuilt=TRUE)
y
y
packageStatus()
install.packages('tidyverse')
library('tidyverse')
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = mpg$displ, y = mpg$hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = mpg$displ, y = mpg$hwy, color = mpg$class))
setwd("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/Unit 7 Data Visualization/Assignments/Visualizing Text Data Using Word CLouds")
?tm
knitr::opts_chunk$set(echo = TRUE, comment = NA, results = "hold", message = FALSE, warning = FALSE)
tweets <- read.csv("tweets.csv", stringsAsFactors = FALSE)
library(tm)
corpus <- VCorpus(VectorSource(tweets))
corpus
corpus$`1`
corpus[[1]]
corpus[[2]]
tweets <- read.csv("tweets.csv", stringsAsFactors = FALSE)
library(tm)
corpus <- VCorpus(VectorSource(tweets))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(removePunctuation))
corpus <- tm_map(corpus, removeWords, stopwords("english"))
dtm <- DocumentTermMatrix(corpus)
allTweets <- as.data.frame(dtm)
?DocumentTermMatrix
View(tweets)
tweets <- read.csv("tweets.csv", stringsAsFactors = FALSE)
library(tm)
corpus <- VCorpus(VectorSource(tweets$Tweet))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(removePunctuation))
corpus <- tm_map(corpus, removeWords, stopwords("english"))
dtm <- DocumentTermMatrix(corpus)
allTweets <- as.data.frame(dtm)
tweets <- read.csv("tweets.csv", stringsAsFactors = FALSE)
library(tm)
corpus <- VCorpus(VectorSource(tweets$Tweet))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(removePunctuation))
corpus <- tm_map(corpus, removeWords, stopwords("english"))
dtm <- DocumentTermMatrix(corpus)
allTweets <- as.data.frame(as.matrix(dtm))
colnames(allTweets) <- make.names(colnames(allTweets))
str(allTweets)
ncol(allTweets)
install.packages("wordcloud")
library(wordcloud)
?wordcloud
wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets), scale = c(2, 0.25))
wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets), scale = c(2, 0.25))
corpus2 <- VCorpus(VectorSource(tweets$Tweet))
corpus2 <- tm_map(corpus2, content_transformer(tolower))
corpus2 <- tm_map(corpus2, content_transformer(removePunctuation))
corpus2 <- tm_map(corpus2, removeWords, c("apple", stopwords("english")))
dtm2 <- DocumentTermMatrix(dtm2)
corpus2 <- VCorpus(VectorSource(tweets$Tweet))
corpus2 <- tm_map(corpus2, content_transformer(tolower))
corpus2 <- tm_map(corpus2, content_transformer(removePunctuation))
corpus2 <- tm_map(corpus2, removeWords, c("apple", stopwords("english")))
dtm2 <- DocumentTermMatrix(corpus2)
allTweets2 <- as.data.frame(as.matrix(dtm2))
colnames(allTweets2) <- make.names(colnames(allTweets2))
wordcloud(colnames(allTweets2), colSums(allTweets2))
corpus2 <- VCorpus(VectorSource(tweets$Tweet))
corpus2 <- tm_map(corpus2, content_transformer(tolower))
corpus2 <- tm_map(corpus2, content_transformer(removePunctuation))
corpus2 <- tm_map(corpus2, removeWords, c("apple", stopwords("english")))
dtm2 <- DocumentTermMatrix(corpus2)
allTweets2 <- as.data.frame(as.matrix(dtm2))
colnames(allTweets2) <- make.names(colnames(allTweets2))
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25))
wordcloud(colnames(allTweets), colSums(allTweets), scale = c(3, 0.25))
?wordcloud
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), random.order = FALSE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), random.order = FALSE, max.words = 100)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), random.order = FALSE, max.words = 150)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), random.order = FALSE, max.words = 200)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), max.words = 200)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), max.words = 200, colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), max.words = 200, colors = "violet", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), max.words = 200, colors = "blue", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), max.words = 200, colors = "black", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = "black", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = "red", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), random.color = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = "red", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = "red", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), colors = "red", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), colors = "yellow", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), colors = "green", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(2, 0.25), colors = "red", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = "red", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = "red", ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), random.order = FALSE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), random.order = FALSE, max.words = 200)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), random.order = FALSE, max.words = 200, colors = "red")
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), random.order = FALSE, max.words = 200, colors = "red", ordered.colors = TRUE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), random.order = FALSE, max.words = 200, colors = "blue", ordered.colors = TRUE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), random.order = FALSE, max.words = 200, ordered.colors = TRUE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), ordered.colors = TRUE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), random.color = TRUE, ordered.colors = TRUE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), random.color = TRUE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue")
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", ordered.colors = TRUE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue")
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 0.5)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 1)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 0.7)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 2)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 1.2)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 0.1)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 0.2)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = "red", random.order = FALSE, ordered.colors = TRUE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 0.2, random.order = FALSE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 0.3, random.order = FALSE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 0.4, random.order = FALSE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 1, random.order = FALSE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 0.1, random.order = FALSE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200, rot.per = 0.5, random.order = FALSE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "blue", max.words = 200)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = "green", rot.per = 0.5)
library(RColorBrewer)
display.brewer.all()
display.brewer.all()
colors=brewer.pal(9, "Blues")
brewer.pal(9, "Blues")[c(5, 6, 7, 8, 9)]
colors
brewer.pal(9, "Blues")[c(-1, -2, -3, -4)]
brewer.pal(9, "Blues")[c(-5, -6, -7, -8, -9)]
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = brewer.pal(9, "Blues")[c(-5, -6, -7, -8, -9)], random.color = FALSE, rot.per = 0.5, max.words = 200, )
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = brewer.pal(9, "Blues")[c(-5, -6, -7, -8, -9)], random.color = FALSE, rot.per = 0.5, max.words = 200, )
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = brewer.pal(9, "Blues"), random.color = FALSE, rot.per = 0.5, max.words = 200, )
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = brewer.pal(9, "Blues"), random.color = FALSE, rot.per = 0.5, max.words = 200)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = brewer.pal(9, "Blues")[5,6,7,8,9], random.color = FALSE, rot.per = 0.5, max.words = 200)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = brewer.pal(9, "Blues")[c(5,6,7,8,9)], random.color = FALSE, rot.per = 0.5, max.words = 200)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = brewer.pal(9, "Purple")[c(5,6,7,8,9)], random.color = FALSE, rot.per = 0.5, max.words = 200)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = brewer.pal(9, "Purple")[c(5,6,7,8,9)], random.color = FALSE, rot.per = 0.5, max.words = 200)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = brewer.pal(9, "Purples")[c(5,6,7,8,9)], random.color = FALSE, rot.per = 0.5, max.words = 200)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = brewer.pal(9, "Purples")[c(5,6,7,8,9)], random.color = FALSE, rot.per = 0.5, max.words = 200, random.order = FALSE)
wordcloud(colnames(allTweets2), colSums(allTweets2), scale = c(3, 0.25), colors = brewer.pal(9, "Purples")[c(5,6,7,8,9)], random.color = FALSE, rot.per = 0.3, max.words = 200, random.order = FALSE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = brewer.pal(4, "Purples"), ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = brewer.pal(9, "Purples"), ordered.colors = TRUE)
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25))
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = brewer.pal(9, "Purples")[c(5,6,7,8,9)])
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = brewer.pal(9, "Purples"))
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = brewer.pal(9, "Purples")[c(5,6,7,8,9)])
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = brewer.pal(9, "Purples")[c(5,6,7,8,9)])
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = brewer.pal(9, "Red")[c(5,6,7,8,9)])
negativeTweets <- subset(allTweets2, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale = c(3, 0.25), colors = brewer.pal(9, "YlOrRd")[c(5,6,7,8,9)])
setwd("~/OneDrive/Documents/Data Science/Courses/The Analytics Edge/Unit 7 Data Visualization/Assignments/Visualizing Attributes of Parole Violators")
knitr::opts_chunk$set(echo = TRUE, comment = NA, results = "hold", message = FALSE, warning = FALSE)
parole <- read.csv("parole.csv")
parole$male <- as.factor(parole$male)
parole$state <- as.factor(parole$state)
parole$crime <- as.factor(parole$crime)
table(parole$male)
table(parole$male, parole$violator)
table(parole$male, parole$violator)
14/(14+64)
table(parole$state, parole$crime)
library(ggplot)
library(ggplot2)
ggplot(parole) + geom_histogram(aes(x=age))
library(ggplot2)
ggplot(parole) + geom_histogram(aes(x=age), binwidth = 5, boudary = 0, color = "black", fill = "cornflowerblue")
library(ggplot2)
ggplot(data = parole, aes(x = age)) + geom_histogram(binwidth = 5, boundary = 0, color = 'black', fill = 'cornflowerblue')
library(ggplot2)
ggplot(parole) + geom_histogram(aes(x=age), binwidth = 5, boudary = 0, color = "black", fill = "cornflowerblue")
library(ggplot2)
ggplot(parole) + geom_histogram(aes(x=age), binwidth = 5, boundary = 0, color = "black", fill = "cornflowerblue")
ggplot(parole) + geom_histogram(aes(x=age), binwidth = 5, boundary = 0, color = "black", fill = "cornflowerblue", color = "blue")
ggplot(parole) + geom_histogram(aes(x=age), binwidth = 5, boundary = 0, color = "black", fill = "cornflowerblue", color = "red")
ggplot(parole) + geom_histogram(aes(x=age), binwidth = 5, boundary = 0, color = "blue", fill = "cornflowerblue")
ggplot(parole) + geom_histogram(aes(x=age), binwidth = 5) + facet_grid(male~.)
ggplot(parole) + geom_histogram(aes(x=age), binwidth = 5, boundary=0) + facet_grid(male~.)
ggplot(parole) + geom_histogram(aes(x=age), binwidth = 5, boundary = 0) + facet_grid(male~.)
ggplot(parole) + geom_histogram(aes(x=age), binwidth = 5) + facet_grid(male~.)
ggplot(parole) + geom_histogram(aes(x=age), binwidth = 5) + facet_grid(.~male)
ggplot(parole) + geom_histogram(aes(x=age, fill=male))
ggplot(parole) + geom_histogram(aes(x=age, fill=male), binwidth = 5)
ggplot(parole) + geom_histogram(aes(x = age, fill = male), binwidth = 5)
ggplot(data = parole, aes(x = age, fill = male)) + geom_histogram(binwidth = 5) + scale_fill_manual(values=colorPalette)
colorPalette = c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(data = parole, aes(x = age, fill = male)) + geom_histogram(binwidth = 5) + scale_fill_manual(values=colorPalette)
ggplot(data = parole, aes(x = age, fill = male)) + geom_histogram(binwidth = 5, alpha = 0.5, position = "identity") + scale_fill_manual(values=colorPalette)
ggplot(data = parole, aes(x = age, fill = male)) + geom_histogram(binwidth = 5, alpha = 0.5, position = "identity", boundary = 0) + scale_fill_manual(values=colorPalette)
ggplot(data = parole, aes(x = age, fill = male)) + geom_histogram(binwidth = 5, boundary = 0) + scale_fill_manual(values=colorPalette)
ggplot(parole) + geom_histogram(aes(x = time.served))
ggplot(parole) + geom_histogram(aes(x = time.served), boundary = 0, binwidth = 1)
ggplot(parole) + geom_histogram(aes(x = time.served), binwidth = 1)
ggplot(parole) + geom_histogram(aes(x = time.served), boundary = 0, binwidth = 1)
ggplot(parole) + geom_histogram(aes(x = time.served), boundary = 0)
ggplot(parole) + geom_histogram(aes(x = time.served), boundary = 0, binwidth = 1)
ggplot(parole) + geom_histogram(aes(x = time.served), binwidth = 1)
ggplot(parole) + geom_histogram(aes(x = time.served), binwidth = 0.1)
ggplot(parole) + geom_histogram(aes(x = time.served), binwidth = 1)
ggplot(parole) + geom_histogram(aes(x = time.served), binwidth = 1) + facet_grid(crime ~.)
ggplot(parole) + geom_histogram(aes(x = time.served, fill = crime), position = "identiy", alpha = 0.5, binwidth = 1)
ggplot(parole) + geom_histogram(aes(x = time.served, fill = crime), position = "identity", alpha = 0.5, binwidth = 1)
